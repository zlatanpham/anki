generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Organization {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String               @db.VarChar(255)
    owner_user_id      String?
    created_at         DateTime?            @default(now()) @db.Timestamptz(6)
    updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
    User               User?                @relation(fields: [owner_user_id], references: [id], onUpdate: NoAction, map: "fk_owner_user")
    OrganizationMember OrganizationMember[]
    Deck               Deck[]
    AIUsageLog         AIUsageLog[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrganizationMember {
    id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    organization_id String       @db.Uuid
    user_id         String
    role            String       @db.VarChar(50)
    joined_at       DateTime?    @default(now()) @db.Timestamptz(6)
    Organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_organization")
    user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

    @@unique([organization_id, user_id])
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String               @id @default(cuid())
    name                   String?
    email                  String?              @unique
    emailVerified          DateTime?
    image                  String?
    password               String? // Added for email/password authentication
    reset_password_token   String?              @map("resetPasswordToken")
    reset_password_expires DateTime?            @map("resetPasswordExpires")
    Account                Account[]
    Organization           Organization[]
    OrganizationMember     OrganizationMember[]
    Session                Session[]
    Deck                   Deck[]
    Review                 Review[]
    CardState              CardState[]
    AIGeneration           AIGeneration[]
    AIUsageLog             AIUsageLog[]
    AIUserQuota            AIUserQuota?
    AIUsageAnalytics       AIUsageAnalytics[]
    CardExplanation        CardExplanation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Flashcard System Models

enum CardType {
    BASIC
    CLOZE
}

enum CardStateEnum {
    NEW
    LEARNING
    REVIEW
    SUSPENDED
}

enum ReviewRating {
    AGAIN
    HARD
    GOOD
    EASY
}

model Deck {
    id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String        @db.VarChar(255)
    description     String?       @db.Text
    user_id         String
    organization_id String?       @db.Uuid
    is_public       Boolean       @default(false)
    settings        Json?
    created_at      DateTime      @default(now()) @db.Timestamptz(6)
    updated_at      DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
    
    user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
    organization    Organization? @relation(fields: [organization_id], references: [id], onDelete: SetNull)
    cards           Card[]
    AIGeneration    AIGeneration[]
    
    @@index([user_id])
    @@index([organization_id])
    @@index([created_at])
}

model Card {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    deck_id     String    @db.Uuid
    card_type   CardType  @default(BASIC)
    front       String    @db.Text
    back        String    @db.Text
    cloze_text  String?   @db.Text
    tags        String[]  @default([])
    note_id     String?   @db.Uuid
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
    
    deck            Deck                @relation(fields: [deck_id], references: [id], onDelete: Cascade)
    reviews         Review[]
    card_states     CardState[]
    explanations    CardExplanation[]
    
    @@index([deck_id])
    @@index([note_id])
    @@index([card_type])
    @@index([created_at])
}

model Review {
    id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    card_id           String        @db.Uuid
    user_id           String
    rating            ReviewRating
    response_time     Int           // milliseconds
    reviewed_at       DateTime      @default(now()) @db.Timestamptz(6)
    previous_interval Int           // days
    new_interval      Int           // days
    easiness_factor   Float
    
    card              Card          @relation(fields: [card_id], references: [id], onDelete: Cascade)
    user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
    
    @@index([card_id])
    @@index([user_id])
    @@index([reviewed_at])
    @@index([rating])
}

model CardState {
    id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    card_id         String        @db.Uuid
    user_id         String
    state           CardStateEnum @default(NEW)
    due_date        DateTime      @db.Timestamptz(6)
    interval        Int           @default(0)          // days
    repetitions     Int           @default(0)
    easiness_factor Float         @default(2.5)
    lapses          Int           @default(0)
    last_reviewed   DateTime?     @db.Timestamptz(6)
    created_at      DateTime      @default(now()) @db.Timestamptz(6)
    updated_at      DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
    
    card            Card          @relation(fields: [card_id], references: [id], onDelete: Cascade)
    user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
    
    @@unique([card_id, user_id])
    @@index([user_id, due_date])
    @@index([user_id, state])
    @@index([card_id])
    @@index([due_date])
}

model AIGeneration {
    id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id         String
    deck_id         String?  @db.Uuid
    input_text      String   @db.Text
    generated_cards Json
    tokens_used     Int
    model_used      String
    created_at      DateTime @default(now()) @db.Timestamptz(6)
    
    user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    deck            Deck?    @relation(fields: [deck_id], references: [id], onDelete: SetNull)
    
    @@index([user_id])
    @@index([deck_id])
    @@index([created_at])
}

// AI Usage Tracking Models

model AIUsageLog {
    id              String       @id @default(cuid())
    user_id         String
    organization_id String?      @db.Uuid
    feature         String       @db.VarChar(50) // card_generation, grammar_check, cloze_suggestion
    model           String       @db.VarChar(100)
    input_tokens    Int
    output_tokens   Int
    total_tokens    Int
    input_cost      Decimal      @db.Decimal(10, 6)
    output_cost     Decimal      @db.Decimal(10, 6)
    total_cost      Decimal      @db.Decimal(10, 6)
    currency        String       @default("USD") @db.VarChar(3)
    latency_ms      Int
    status          String       @db.VarChar(20) // success, error, timeout
    error_message   String?      @db.Text
    metadata        Json?        // Additional context
    created_at      DateTime     @default(now()) @db.Timestamptz(6)
    
    user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
    organization    Organization? @relation(fields: [organization_id], references: [id], onDelete: SetNull)
    
    @@index([user_id, created_at])
    @@index([organization_id, created_at])
    @@index([feature, created_at])
}

model AIUserQuota {
    id              String   @id @default(cuid())
    user_id         String   @unique
    monthly_limit   Int      @default(1000000) // tokens per month
    current_usage   Int      @default(0)
    reset_date      DateTime @db.Timestamptz(6)
    tier            String   @default("free") @db.VarChar(20) // free, pro, enterprise
    created_at      DateTime @default(now()) @db.Timestamptz(6)
    updated_at      DateTime @default(now()) @updatedAt @db.Timestamptz(6)
    
    user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model AIUsageAnalytics {
    id              String   @id @default(cuid())
    user_id         String
    period          String   @db.VarChar(10) // daily, weekly, monthly
    period_start    DateTime @db.Timestamptz(6)
    period_end      DateTime @db.Timestamptz(6)
    total_requests  Int
    total_tokens    Int
    total_cost      Decimal  @db.Decimal(10, 6)
    avg_latency_ms  Int
    success_rate    Decimal  @db.Decimal(5, 2)
    top_features    Json     // {feature: count}
    created_at      DateTime @default(now()) @db.Timestamptz(6)
    
    user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    
    @@unique([user_id, period, period_start])
    @@index([user_id, period_start])
}

// AI Explanation Models

model CardExplanation {
    id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    card_id           String    @db.Uuid
    user_id           String
    question_type     String    @db.VarChar(50) // eli5, example, importance, breakdown, custom
    question          String?   @db.Text
    explanation       String    @db.Text
    tokens_used       Int?
    is_saved          Boolean   @default(false)
    tags              String[]  @default([])
    created_at        DateTime  @default(now()) @db.Timestamptz(6)
    
    card              Card      @relation(fields: [card_id], references: [id], onDelete: Cascade)
    user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    
    @@index([card_id, user_id])
    @@index([user_id, is_saved])
    @@index([created_at])
}
